# Generated from Postgres.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO


def serializedATN():
    return [
        4,0,51,413,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,1,0,1,0,1,1,
        1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,
        1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,
        1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,
        1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
        1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,
        1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,
        1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,42,1,42,5,42,334,8,42,10,42,12,42,337,9,42,1,43,4,43,340,8,43,
        11,43,12,43,341,1,44,1,44,1,44,1,44,5,44,348,8,44,10,44,12,44,351,
        9,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,
        364,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,47,4,47,378,8,47,11,47,12,47,379,1,48,1,48,1,48,1,48,5,48,386,
        8,48,10,48,12,48,389,9,48,1,48,1,48,1,49,1,49,1,49,1,49,5,49,397,
        8,49,10,49,12,49,400,9,49,1,49,1,49,1,49,1,49,1,49,1,50,4,50,408,
        8,50,11,50,12,50,409,1,50,1,50,1,398,0,51,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,
        101,51,1,0,30,3,0,67,67,99,99,124,124,3,0,82,82,114,114,124,124,
        3,0,69,69,101,101,124,124,3,0,65,65,97,97,124,124,3,0,84,84,116,
        116,124,124,3,0,66,66,98,98,124,124,3,0,76,76,108,108,124,124,3,
        0,83,83,115,115,124,124,3,0,70,70,102,102,124,124,3,0,79,79,111,
        111,124,124,3,0,77,77,109,109,124,124,3,0,87,87,119,119,124,124,
        3,0,72,72,104,104,124,124,3,0,78,78,110,110,124,124,3,0,68,68,100,
        100,124,124,3,0,73,73,105,105,124,124,3,0,86,86,118,118,124,124,
        3,0,85,85,117,117,124,124,3,0,80,80,112,112,124,124,3,0,89,89,121,
        121,124,124,3,0,75,75,107,107,124,124,3,0,81,81,113,113,124,124,
        3,0,71,71,103,103,124,124,3,0,88,88,120,120,124,124,3,0,65,90,95,
        95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,1,0,39,39,2,0,10,
        10,13,13,3,0,9,10,13,13,32,32,421,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
        0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
        0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,
        0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,1,103,1,0,0,0,3,105,
        1,0,0,0,5,107,1,0,0,0,7,109,1,0,0,0,9,111,1,0,0,0,11,113,1,0,0,0,
        13,116,1,0,0,0,15,118,1,0,0,0,17,120,1,0,0,0,19,123,1,0,0,0,21,126,
        1,0,0,0,23,133,1,0,0,0,25,139,1,0,0,0,27,146,1,0,0,0,29,151,1,0,
        0,0,31,157,1,0,0,0,33,161,1,0,0,0,35,164,1,0,0,0,37,171,1,0,0,0,
        39,176,1,0,0,0,41,183,1,0,0,0,43,194,1,0,0,0,45,202,1,0,0,0,47,206,
        1,0,0,0,49,213,1,0,0,0,51,217,1,0,0,0,53,222,1,0,0,0,55,226,1,0,
        0,0,57,234,1,0,0,0,59,243,1,0,0,0,61,250,1,0,0,0,63,255,1,0,0,0,
        65,262,1,0,0,0,67,267,1,0,0,0,69,272,1,0,0,0,71,280,1,0,0,0,73,288,
        1,0,0,0,75,296,1,0,0,0,77,301,1,0,0,0,79,306,1,0,0,0,81,316,1,0,
        0,0,83,324,1,0,0,0,85,331,1,0,0,0,87,339,1,0,0,0,89,343,1,0,0,0,
        91,363,1,0,0,0,93,365,1,0,0,0,95,377,1,0,0,0,97,381,1,0,0,0,99,392,
        1,0,0,0,101,407,1,0,0,0,103,104,5,40,0,0,104,2,1,0,0,0,105,106,5,
        44,0,0,106,4,1,0,0,0,107,108,5,41,0,0,108,6,1,0,0,0,109,110,5,42,
        0,0,110,8,1,0,0,0,111,112,5,61,0,0,112,10,1,0,0,0,113,114,5,33,0,
        0,114,115,5,61,0,0,115,12,1,0,0,0,116,117,5,62,0,0,117,14,1,0,0,
        0,118,119,5,60,0,0,119,16,1,0,0,0,120,121,5,62,0,0,121,122,5,61,
        0,0,122,18,1,0,0,0,123,124,5,60,0,0,124,125,5,61,0,0,125,20,1,0,
        0,0,126,127,7,0,0,0,127,128,7,1,0,0,128,129,7,2,0,0,129,130,7,3,
        0,0,130,131,7,4,0,0,131,132,7,2,0,0,132,22,1,0,0,0,133,134,7,4,0,
        0,134,135,7,3,0,0,135,136,7,5,0,0,136,137,7,6,0,0,137,138,7,2,0,
        0,138,24,1,0,0,0,139,140,7,7,0,0,140,141,7,2,0,0,141,142,7,6,0,0,
        142,143,7,2,0,0,143,144,7,0,0,0,144,145,7,4,0,0,145,26,1,0,0,0,146,
        147,7,8,0,0,147,148,7,1,0,0,148,149,7,9,0,0,149,150,7,10,0,0,150,
        28,1,0,0,0,151,152,7,11,0,0,152,153,7,12,0,0,153,154,7,2,0,0,154,
        155,7,1,0,0,155,156,7,2,0,0,156,30,1,0,0,0,157,158,7,3,0,0,158,159,
        7,13,0,0,159,160,7,14,0,0,160,32,1,0,0,0,161,162,7,9,0,0,162,163,
        7,1,0,0,163,34,1,0,0,0,164,165,7,15,0,0,165,166,7,13,0,0,166,167,
        7,7,0,0,167,168,7,2,0,0,168,169,7,1,0,0,169,170,7,4,0,0,170,36,1,
        0,0,0,171,172,7,15,0,0,172,173,7,13,0,0,173,174,7,4,0,0,174,175,
        7,9,0,0,175,38,1,0,0,0,176,177,7,16,0,0,177,178,7,3,0,0,178,179,
        7,6,0,0,179,180,7,17,0,0,180,181,7,2,0,0,181,182,7,7,0,0,182,40,
        1,0,0,0,183,184,7,0,0,0,184,185,7,9,0,0,185,186,7,13,0,0,186,187,
        7,7,0,0,187,188,7,4,0,0,188,189,7,1,0,0,189,190,7,3,0,0,190,191,
        7,15,0,0,191,192,7,13,0,0,192,193,7,4,0,0,193,42,1,0,0,0,194,195,
        7,18,0,0,195,196,7,1,0,0,196,197,7,15,0,0,197,198,7,10,0,0,198,199,
        7,3,0,0,199,200,7,1,0,0,200,201,7,19,0,0,201,44,1,0,0,0,202,203,
        7,20,0,0,203,204,7,2,0,0,204,205,7,19,0,0,205,46,1,0,0,0,206,207,
        7,17,0,0,207,208,7,13,0,0,208,209,7,15,0,0,209,210,7,21,0,0,210,
        211,7,17,0,0,211,212,7,2,0,0,212,48,1,0,0,0,213,214,7,13,0,0,214,
        215,7,9,0,0,215,216,7,4,0,0,216,50,1,0,0,0,217,218,7,13,0,0,218,
        219,7,17,0,0,219,220,7,6,0,0,220,221,7,6,0,0,221,52,1,0,0,0,222,
        223,7,15,0,0,223,224,7,13,0,0,224,225,7,4,0,0,225,54,1,0,0,0,226,
        227,7,15,0,0,227,228,7,13,0,0,228,229,7,4,0,0,229,230,7,2,0,0,230,
        231,7,22,0,0,231,232,7,2,0,0,232,233,7,1,0,0,233,56,1,0,0,0,234,
        235,7,7,0,0,235,236,7,10,0,0,236,237,7,3,0,0,237,238,7,6,0,0,238,
        239,7,6,0,0,239,240,7,15,0,0,240,241,7,13,0,0,241,242,7,4,0,0,242,
        58,1,0,0,0,243,244,7,5,0,0,244,245,7,15,0,0,245,246,7,22,0,0,246,
        247,7,15,0,0,247,248,7,13,0,0,248,249,7,4,0,0,249,60,1,0,0,0,250,
        251,7,1,0,0,251,252,7,2,0,0,252,253,7,3,0,0,253,254,7,6,0,0,254,
        62,1,0,0,0,255,256,7,14,0,0,256,257,7,9,0,0,257,258,7,17,0,0,258,
        259,7,5,0,0,259,260,7,6,0,0,260,261,7,2,0,0,261,64,1,0,0,0,262,263,
        7,4,0,0,263,264,7,2,0,0,264,265,7,23,0,0,265,266,7,4,0,0,266,66,
        1,0,0,0,267,268,7,0,0,0,268,269,7,12,0,0,269,270,7,3,0,0,270,271,
        7,1,0,0,271,68,1,0,0,0,272,273,7,16,0,0,273,274,7,3,0,0,274,275,
        7,1,0,0,275,276,7,0,0,0,276,277,7,12,0,0,277,278,7,3,0,0,278,279,
        7,1,0,0,279,70,1,0,0,0,280,281,7,13,0,0,281,282,7,17,0,0,282,283,
        7,10,0,0,283,284,7,2,0,0,284,285,7,1,0,0,285,286,7,15,0,0,286,287,
        7,0,0,0,287,72,1,0,0,0,288,289,7,14,0,0,289,290,7,2,0,0,290,291,
        7,0,0,0,291,292,7,15,0,0,292,293,7,10,0,0,293,294,7,3,0,0,294,295,
        7,6,0,0,295,74,1,0,0,0,296,297,7,14,0,0,297,298,7,3,0,0,298,299,
        7,4,0,0,299,300,7,2,0,0,300,76,1,0,0,0,301,302,7,4,0,0,302,303,7,
        15,0,0,303,304,7,10,0,0,304,305,7,2,0,0,305,78,1,0,0,0,306,307,7,
        4,0,0,307,308,7,15,0,0,308,309,7,10,0,0,309,310,7,2,0,0,310,311,
        7,7,0,0,311,312,7,4,0,0,312,313,7,3,0,0,313,314,7,10,0,0,314,315,
        7,18,0,0,315,80,1,0,0,0,316,317,7,5,0,0,317,318,7,9,0,0,318,319,
        7,9,0,0,319,320,7,6,0,0,320,321,7,2,0,0,321,322,7,3,0,0,322,323,
        7,13,0,0,323,82,1,0,0,0,324,325,7,7,0,0,325,326,7,2,0,0,326,327,
        7,1,0,0,327,328,7,15,0,0,328,329,7,3,0,0,329,330,7,6,0,0,330,84,
        1,0,0,0,331,335,7,24,0,0,332,334,7,25,0,0,333,332,1,0,0,0,334,337,
        1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,0,336,86,1,0,0,0,337,335,1,
        0,0,0,338,340,7,26,0,0,339,338,1,0,0,0,340,341,1,0,0,0,341,339,1,
        0,0,0,341,342,1,0,0,0,342,88,1,0,0,0,343,349,5,39,0,0,344,345,5,
        39,0,0,345,348,5,39,0,0,346,348,8,27,0,0,347,344,1,0,0,0,347,346,
        1,0,0,0,348,351,1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,352,
        1,0,0,0,351,349,1,0,0,0,352,353,5,39,0,0,353,90,1,0,0,0,354,355,
        7,4,0,0,355,356,7,1,0,0,356,357,7,17,0,0,357,364,7,2,0,0,358,359,
        7,8,0,0,359,360,7,3,0,0,360,361,7,6,0,0,361,362,7,7,0,0,362,364,
        7,2,0,0,363,354,1,0,0,0,363,358,1,0,0,0,364,92,1,0,0,0,365,366,5,
        39,0,0,366,367,7,26,0,0,367,368,6,46,0,0,368,369,5,45,0,0,369,370,
        7,26,0,0,370,371,6,46,1,0,371,372,5,45,0,0,372,373,7,26,0,0,373,
        374,6,46,2,0,374,375,5,39,0,0,375,94,1,0,0,0,376,378,5,59,0,0,377,
        376,1,0,0,0,378,379,1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,
        96,1,0,0,0,381,382,5,45,0,0,382,383,5,45,0,0,383,387,1,0,0,0,384,
        386,8,28,0,0,385,384,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,
        388,1,0,0,0,388,390,1,0,0,0,389,387,1,0,0,0,390,391,6,48,3,0,391,
        98,1,0,0,0,392,393,5,47,0,0,393,394,5,42,0,0,394,398,1,0,0,0,395,
        397,9,0,0,0,396,395,1,0,0,0,397,400,1,0,0,0,398,399,1,0,0,0,398,
        396,1,0,0,0,399,401,1,0,0,0,400,398,1,0,0,0,401,402,5,42,0,0,402,
        403,5,47,0,0,403,404,1,0,0,0,404,405,6,49,3,0,405,100,1,0,0,0,406,
        408,7,29,0,0,407,406,1,0,0,0,408,409,1,0,0,0,409,407,1,0,0,0,409,
        410,1,0,0,0,410,411,1,0,0,0,411,412,6,50,3,0,412,102,1,0,0,0,10,
        0,335,341,347,349,363,379,387,398,409,4,1,46,0,1,46,1,1,46,2,6,0,
        0
    ]

class PostgresLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    CREATE = 11
    TABLE = 12
    SELECT = 13
    FROM = 14
    WHERE = 15
    AND = 16
    OR = 17
    INSERT = 18
    INTO = 19
    VALUES = 20
    CONSTRAINT = 21
    PRIMARY = 22
    KEY = 23
    UNIQUE = 24
    NOT = 25
    NULL = 26
    INT = 27
    INTEGER = 28
    SMALLINT = 29
    BIGINT = 30
    REAL = 31
    DOUBLE = 32
    TEXT = 33
    CHAR = 34
    VARCHAR = 35
    NUMERIC = 36
    DECIMAL = 37
    DATE = 38
    TIME = 39
    TIMESTAMP = 40
    BOOLEAN = 41
    SERIAL = 42
    IDENTIFIER = 43
    NUMERIC_LITERAL = 44
    STRING_LITERAL = 45
    BOOLEAN_LITERAL = 46
    DATE_LITERAL = 47
    SEMI = 48
    LINE_COMMENT = 49
    BLOCK_COMMENT = 50
    WS = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "','", "')'", "'*'", "'='", "'!='", "'>'", "'<'", "'>='", 
            "'<='" ]

    symbolicNames = [ "<INVALID>",
            "CREATE", "TABLE", "SELECT", "FROM", "WHERE", "AND", "OR", "INSERT", 
            "INTO", "VALUES", "CONSTRAINT", "PRIMARY", "KEY", "UNIQUE", 
            "NOT", "NULL", "INT", "INTEGER", "SMALLINT", "BIGINT", "REAL", 
            "DOUBLE", "TEXT", "CHAR", "VARCHAR", "NUMERIC", "DECIMAL", "DATE", 
            "TIME", "TIMESTAMP", "BOOLEAN", "SERIAL", "IDENTIFIER", "NUMERIC_LITERAL", 
            "STRING_LITERAL", "BOOLEAN_LITERAL", "DATE_LITERAL", "SEMI", 
            "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "CREATE", "TABLE", "SELECT", "FROM", 
                  "WHERE", "AND", "OR", "INSERT", "INTO", "VALUES", "CONSTRAINT", 
                  "PRIMARY", "KEY", "UNIQUE", "NOT", "NULL", "INT", "INTEGER", 
                  "SMALLINT", "BIGINT", "REAL", "DOUBLE", "TEXT", "CHAR", 
                  "VARCHAR", "NUMERIC", "DECIMAL", "DATE", "TIME", "TIMESTAMP", 
                  "BOOLEAN", "SERIAL", "IDENTIFIER", "NUMERIC_LITERAL", 
                  "STRING_LITERAL", "BOOLEAN_LITERAL", "DATE_LITERAL", "SEMI", 
                  "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    grammarFileName = "Postgres.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[46] = self.DATE_LITERAL_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def DATE_LITERAL_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            4
     

        if actionIndex == 1:
            2
     

        if actionIndex == 2:
            2
     


